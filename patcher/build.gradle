apply plugin: 'com.android.library'

android {
    compileSdkVersion 26
    defaultConfig {
        minSdkVersion 22
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"

//        sourceSets.main.jni.srcDirs = [] //禁用自带编译ndk功能
//        sourceSets.main.jniLibs.srcDir 'src/main/libs'
        externalNativeBuild {
            cmake {
                cppFlags "-w"
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/jni/CMakeLists.txt"
        }
    }
    buildToolsVersion '26.0.2'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
}

//tasks.withType(JavaCompile) {
//    compileTask -> compileTask.dependsOn ndkBuild
//}
//
//task ndkBuild(type: Exec) {
//    workingDir file('src/main/jni')
//    commandLine getNdkBuildCmd()
//}
//
//task cleanNative(type: Exec) {
//    workingDir file('src/main/jni')
//    commandLine getNdkBuildCmd(), 'clean'
//}
//
//clean.dependsOn cleanNative
//
//def getNdkDir() {
//    if (System.env.ANDROID_NDK_ROOT != null)
//        return System.env.ANDROID_NDK_ROOT
//    Properties properties = new Properties()
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//    def ndkdir = properties.getProperty('ndk.dir', null)
//    if (ndkdir == null)
//        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")
//    return ndkdir
//}
//
//def getNdkBuildCmd() {
//    def ndkbuild = getNdkDir() + "/ndk-build"
//    ndkbuild += ".cmd"
//    return ndkbuild
//}